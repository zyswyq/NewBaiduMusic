package com.example.dllo.newbaidumusic.mydb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIKE_SONG_BEAN".
*/
public class LikeSongBeanDao extends AbstractDao<LikeSongBean, String> {

    public static final String TABLENAME = "LIKE_SONG_BEAN";

    /**
     * Properties of entity LikeSongBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SongId = new Property(0, String.class, "songId", true, "SONG_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Singer = new Property(2, String.class, "singer", false, "SINGER");
        public final static Property PicUrl = new Property(3, String.class, "picUrl", false, "PIC_URL");
    }


    public LikeSongBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LikeSongBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIKE_SONG_BEAN\" (" + //
                "\"SONG_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: songId
                "\"TITLE\" TEXT," + // 1: title
                "\"SINGER\" TEXT," + // 2: singer
                "\"PIC_URL\" TEXT);"); // 3: picUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIKE_SONG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LikeSongBean entity) {
        stmt.clearBindings();
 
        String songId = entity.getSongId();
        if (songId != null) {
            stmt.bindString(1, songId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String singer = entity.getSinger();
        if (singer != null) {
            stmt.bindString(3, singer);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(4, picUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LikeSongBean entity) {
        stmt.clearBindings();
 
        String songId = entity.getSongId();
        if (songId != null) {
            stmt.bindString(1, songId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String singer = entity.getSinger();
        if (singer != null) {
            stmt.bindString(3, singer);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(4, picUrl);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LikeSongBean readEntity(Cursor cursor, int offset) {
        LikeSongBean entity = new LikeSongBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // songId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // singer
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // picUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LikeSongBean entity, int offset) {
        entity.setSongId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSinger(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPicUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LikeSongBean entity, long rowId) {
        return entity.getSongId();
    }
    
    @Override
    public String getKey(LikeSongBean entity) {
        if(entity != null) {
            return entity.getSongId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LikeSongBean entity) {
        return entity.getSongId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
